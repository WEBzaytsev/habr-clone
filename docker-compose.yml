version: '3.9'

services:

  # Application Service
  cargo:
    container_name: cargo
    restart: unless-stopped
    build:
      context: ./docker
      dockerfile: php-node.Dockerfile
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - ${APP_PORT:-9005}:9000
    env_file:
      - .env
    networks:
      - caddy
  # Web Server Service
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - ${NG_PORT:-8080}:80
    volumes:
      - ./src/public:/var/www/public
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
      - ./docker/nginx/logs/:/var/log/nginx/
    depends_on:
      - cargo
      # - db
    networks:
      - caddy
  # Database Service
  # db:
  #   image: postgres
  #   container_name: postgres
  #   restart: unless-stopped
  #   volumes:
  #     - ./docker/db:/var/lib/postgresql/data
  #   ports:
  #     - ${PG_PORT:-5433}:5433
  #   environment:
  #     POSTGRES_DB: ${DB_DATABASE}
  #     POSTGRES_USER: ${DB_USERNAME}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   healthcheck:
  #     test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 60s
  #   networks:
  #     - caddy
  # Redis Cache Service
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - ${REDIS:-6379}:6379
    networks:
      - caddy
  # Pgadmin Cache Service
  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgAdmin
  #   restart: unless-stopped
  #   ports:
  #     - ${PG_ADMIN_PORT:-5050}:80
  #   depends_on:
  #     - db
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   networks:
  #     - caddy
networks:
  caddy:
    external: true